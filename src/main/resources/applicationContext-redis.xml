<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">



    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:*.properties" />
    <!--扫面测试注解的路径-->
    <context:component-scan base-package="com.redislock.data.springdemo.zhujie"/>
    <!--分布式锁整合到spring中-->
    <bean id="config" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <property name="maxTotal" value="${redis.maxTotal}"></property>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
        <property name="testWhileIdle" value="${redis.testWhileIdle}"></property>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg type="org.apache.commons.pool2.impl.GenericObjectPoolConfig" ref="config"></constructor-arg>
        <constructor-arg type="java.lang.String" value="${redis.hostName}"></constructor-arg>
        <constructor-arg type="int" value="${redis.port}"></constructor-arg>
        <constructor-arg type="int" value="${redis.timeout}"></constructor-arg>
    </bean>

    <!--<bean id="redisLockTool" class="com.redislock.data.springdemo.RedisLockTool">-->
        <!--<property name="jedisPool" ref="jedisPool"></property>-->
    <!--</bean>-->

    <!--<bean id="MiaoShaThread" class="com.redislock.data.springdemo.MiaoShaThread">-->
        <!--<property name="redisLockTool" ref="redisLockTool"></property>-->
    <!--</bean>-->


    <!--以下是redis集群配置-->
    <!--&lt;!&ndash; redis连接池配置&ndash;&gt;-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >-->
        <!--&lt;!&ndash;最大空闲数&ndash;&gt;-->
        <!--<property name="maxIdle" value="${redis.maxIdle}" />-->
        <!--&lt;!&ndash;连接池的最大数据库连接数  &ndash;&gt;-->
        <!--<property name="maxTotal" value="${redis.maxTotal}" />-->
        <!--&lt;!&ndash;最大建立连接等待时间&ndash;&gt;-->
        <!--<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />-->
        <!--&lt;!&ndash;逐出连接的最小空闲时间 默认1800000毫秒(30分钟)&ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />-->
        <!--&lt;!&ndash;每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3&ndash;&gt;-->
        <!--<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />-->
        <!--&lt;!&ndash;逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1&ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />-->
        <!--&lt;!&ndash;是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个&ndash;&gt;-->
        <!--<property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
        <!--&lt;!&ndash;在空闲时检查有效性, 默认false  &ndash;&gt;-->
        <!--<property name="testWhileIdle" value="${redis.testWhileIdle}" />-->
    <!--</bean >-->


    <!-- redis集群配置 哨兵模式 -->
    <!-- <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                这个值要和Sentinel中指定的master的值一致，不然启动时找不到Sentinel会报错的
                <property name="name" value="mymaster"></property>
            </bean>
        </property>
        记住了,这里是指定Sentinel的IP和端口，不是Master和Slave的
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel.host1}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel.port1}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel.host2}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel.port2}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel.host3}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel.port3}"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration"></constructor-arg>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
    </bean> -->

    <!--&lt;!&ndash;redis连接工厂 &ndash;&gt;-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">-->
        <!--<property name="poolConfig" ref="jedisPoolConfig"></property>-->
        <!--&lt;!&ndash;IP地址 &ndash;&gt;-->
        <!--<property name="hostName" value="${redis.hostName}"></property>-->
        <!--&lt;!&ndash;端口号  &ndash;&gt;-->
        <!--<property name="port" value="${redis.port}"></property>-->
        <!--&lt;!&ndash;如果Redis设置有密码-->
        <!--<property name="password" value="${redis.password}" />&ndash;&gt;-->
        <!--&lt;!&ndash;客户端超时时间单位是毫秒  &ndash;&gt;-->
        <!--<property name="timeout" value="${redis.timeout}"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;redis操作模版,使用该对象可以操作redis  &ndash;&gt;-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
        <!--&lt;!&ndash;如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  &ndash;&gt;-->
        <!--<property name="keySerializer" >-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="valueSerializer" >-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
        <!--&lt;!&ndash;开启事务  &ndash;&gt;-->
        <!--<property name="enableTransactionSupport" value="true"></property>-->
    <!--</bean >-->

    <!--自定义redis工具类,在需要缓存的地方注入此类
    <bean id="redisLock" class="com.redislock.data.redis.RedisLock">
        <property name="redisTemplate" ref="redisTemplate" />
        <property name="lockKey" ref="redisTemplate" />
        <property name="redisTemplate" ref="redisTemplate" />
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>-->

</beans>
